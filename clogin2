#!/usr/bin/expect --
##
##
## Copyright (C) 1997-2001 by Henry Kilmer, Erik Sherk and Pete Whiting.
## All rights reserved.
##
## This software may be freely copied, modified and redistributed without
## fee for non-commerical purposes provided that this copyright notice is
## preserved intact on all copies and modified copies.
##
## There is no warranty or other guarantee of fitness of this software.
## It is provided solely "as is". The author(s) disclaim(s) all
## responsibility and liability with respect to this software's usage
## or its effect upon hardware, computer systems, other software, or
## anything else.
##
##
#
# clogin - Cisco login
#
# Most options are intuitive for logging into a Cisco router.
# The default is to enable (thus -noenable).  Some folks have
# setup tacacs to have a user login at priv-lvl = 15 (enabled)
# so the -autoenable flag was added for this case (don't go through
# the process of enabling and the prompt will be the "#" prompt.
# The default username password is the same as the vty password.
#

# insert this line to start internal debugger
# debug 1
# exp_internal 1

# Usage line
set usage "Usage: $argv0 \[-autoenable\] \[-noenable\] \[-c command\] \
\[-Evar=x\] \[-e enable-password\] \[-f cloginrc-file\] \[-p user-password\] \
\[-s script-file\] \[-t timeout\] \[-u username\] \
\[-v vty-password\] \[-w enable-username\] \[-x command-file\] \
\[-y ssh_cypher_type\] router \[router...\]\n"

# env(CLOGIN) may contain:
#	x == do not set xterm banner or name

# Password file
set password_file $env(HOME)/.cloginrc
# Default is to login to the router
set do_command 0
set do_script 0
# The default is to automatically enable
set enable 1
# set autoenable 1 if the device enables you by default
# this happens, eg, on Ciscos when radius returns usertype of admin user
set autoenable 0
# The default is to look in the password file to find the passwords.  This
# tracks if we receive them on the command line.
set do_passwd 1
set do_enapasswd 1
# attempt at platform switching.
set platform ""
set sshver ""

# Find the user in the ENV, or use the unix userid.
if {[ info exists env(CISCO_USER) ] } {
    set default_user $env(CISCO_USER)
} elseif {[ info exists env(USER) ]} {
    set default_user $env(USER)
} else {
    # This uses "id" which I think is portable.  At least it has existed
    # (without options) on all machines/OSes I've been on recently -
    # unlike whoami or id -nu.
    if [ catch {exec id} reason ] {
	send_error "\nError: could not exec id: $reason\n"
	exit 1
    }
    regexp {\(([^)]*)} "$reason" junk default_user
}

# open a log file, and log the user and options
# set log_file /var/local/log/clogin2.log
# if [ catch {set log_fd [open $log_file a+]} reason ] {
#    send_user "\nError unable to open log file $log_file: $reason\n"
#    exit 1
# }

# set log_entry [clock format [clock seconds] -format {%b %d %H:%M}]
# append log_entry " clogin2: User $default_user ran clogin2"

# if { $::argc > 0 } {
#   set options $::argv
#   foreach arg $::argv {
#     append log_entry " $arg"
#   }
# }

# if [ catch { puts $log_fd $log_entry } reason ] {
#    send_user "\nError unable to write to log file $log_file: $reason\n"
#    send_user "log_entry: $log_entry\n"
#    exit 1
# }


# Sometimes routers take awhile to answer (the default is 10 sec)
set timeout 45

# Process the command line
for {set i 0} {$i < $argc} {incr i} {
    set arg [lindex $argv $i]

    switch  -glob -- $arg {
	# Username
	-u* -
	-U* {
	    if {! [  regexp .\[uU\](.+) $arg ignore user]} {
		incr i
		set username [ lindex $argv $i ]
	    }
	# VTY Password
	} -p* -
	-P* {
	    if {! [  regexp .\[pP\](.+) $arg ignore userpasswd]} {
		incr i
		set userpasswd [ lindex $argv $i ]
	    }
	    set do_passwd 0
	# VTY Password
	} -v* -
	-v* {
	    if {! [  regexp .\[vV\](.+) $arg ignore passwd]} {
		incr i
		set passwd [ lindex $argv $i ]
	    }
	    set do_passwd 0
	# Enable Username
	} -w* -
	-W* {
	    if {! [  regexp .\[wW\](.+) $arg ignore enauser]} {
		incr i
		set enausername [ lindex $argv $i ]
	    }
	# Environment variable to pass to -s scripts
	} -E*
	{
	    if {[ regexp .\[E\](.+)=(.+) $arg ignore varname varvalue]} {
		set E$varname $varvalue
	    } else {
		send_user "Error: invalid format for -E in $arg\n"
		exit 1
	    }
	# Enable Password
	} -e*
	{
	    if {! [  regexp .\[e\](.+) $arg ignore enapasswd]} {
		incr i
		set enapasswd [ lindex $argv $i ]
	    }
	    set do_enapasswd 0
	# Command to run.
	} -c* -
	-C* {
	    if {! [  regexp .\[cC\](.+) $arg ignore command]} {
		incr i
		set command [ lindex $argv $i ]
	    }
	    set do_command 1
	# Expect script to run.
	} -s* -
	-S* {
	    if {! [  regexp .\[sS\](.+) $arg ignore sfile]} {
		incr i
		set sfile [ lindex $argv $i ]
	    }
	    if { ! [ file readable $sfile ] } {
		send_user "\nError: Can't read $sfile\n"
		exit 1
	    }
	    set do_script 1
	# 'ssh -c' cypher type
	} -y* -
	-Y* {
	    if {! [  regexp .\[eE\](.+) $arg ignore cypher]} {
		incr i
		set cypher [ lindex $argv $i ]
	    }
	# alternate cloginrc file
	} -f* -
	-F* {
	    if {! [ regexp .\[fF\](.+) $arg ignore password_file]} {
		incr i
		set password_file [ lindex $argv $i ]
	    }
	# Timeout
	} -t* -
	-T* {
	    if {! [ regexp .\[tT\](.+) $arg ignore timeout]} {
		incr i
	        set timeout [ lindex $argv $i ]
	    }
	# Command file
	} -x* -
	-X {
	    if {! [  regexp .\[xX\](.+) $arg ignore cmd_file]} {
		incr i
		set cmd_file [ lindex $argv $i ]
	    }
	    if [ catch {set cmd_fd [open $cmd_file r]} reason ] {
		send_user "\nError: $reason\n"
		exit 1
	    }
	    set cmd_text [read $cmd_fd]
	    close $cmd_fd
	    set command [join [split $cmd_text \n] \;]
	    set do_command 1
	# Do we enable?
	} -noenable {
	    set enable 0
	# Does tacacs automatically enable us?
	} -autoenable {
	    set autoenable 1
	    set enable 0
	} -* {
	    send_user "\nError: Unknown argument! $arg\n"
	    send_user $usage
	    exit 1
	} default {
	    break
	}
    }
}
# Process routers...no routers listed is an error.
if { $i == $argc } {
    send_user "\nError: $usage"
}

# Only be quiet if we are running a script (it can log its output
# on its own)
if { $do_script } {
    log_user 0
} else {
    log_user 1
}

#
# Done configuration/variable setting.  Now run with it...
#

# Sets Xterm title if interactive...if its an xterm and the user cares
proc label { host } {
    global env
    # if CLOGIN has an 'x' in it, don't set the xterm name/banner
    if [info exists env(CLOGIN)] {
	if {[string first "x" $env(CLOGIN)] != -1} { return }
    }
    # take host from ENV(TERM)
    if [info exists env(TERM)] {
	if [regexp \^(xterm|vs) $env(TERM) ignore ] {
	    send_user "\033]1;[lindex [split $host "."] 0]\a"
	    send_user "\033]2;$host\a"
	}
    }
}

# This is a helper function to make the password file easier to
# maintain.  Using this the password file has the form:
# add password sl*	pete cow
# add password at*	steve
# add password *	hanky-pie
proc add {var args} { global int_$var ; lappend int_$var $args}
proc include {args} {
    global env
    regsub -all "(^{|}$)" $args {} args
    if { [ regexp "^/" $args ignore ] == 0 } {
	set args $env(HOME)/$args
    }
    source_password_file $args
}

proc find {var router} {
    upvar int_$var list
    if { [info exists list] } {
	foreach line $list {
	    if { [string match [lindex $line 0] $router ] } {
		return [lrange $line 1 end]
	    }
	}
    }
    return {}
}

# Loads the password file.  Note that as this file is tcl, and that
# it is sourced, the user better know what to put in there, as it
# could install more than just password info...  I will assume however,
# that a "bad guy" could just as easy put such code in the clogin
# script, so I will leave .cloginrc as just an extention of that script
proc source_password_file { password_file } {
    global env
    if { ! [file exists $password_file] } {
	send_user "\nError: password file ($password_file) does not exist\n"
	exit 1
    }
    file stat $password_file fileinfo
    if { [expr ($fileinfo(mode) & 007)] != 0000 } {
	send_user "\nError: $password_file must not be world readable/writable\n"
	exit 1
    }
    if [ catch {source $password_file} reason ] {
	send_user "\nError: $reason\n"
	exit 1
    }
}

# finished parsing password file

# Log into the router.
proc login { router user userpswd passwd enapasswd cmethod cyphertype } {
    global spawn_id in_proc do_command do_script platform sshver
    global prompt u_prompt p_prompt e_prompt
    set in_proc 1
    set uprompt_seen 0

    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
        if [string match "telnet*" $prog] {
            regexp {telnet(:([^[:space:]]+))*} $prog command suffix port
            if {"$port" == ""} {
                set retval [ catch {spawn telnet $router} reason ]
            } else {
                set retval [ catch {spawn telnet $router $port} reason ]
            }
            if { $retval } {
                send_user "\nError: telnet failed: $reason\n"
                exit 1
            }
        } elseif ![string compare $prog "bash"] {
            if [ catch {spawn /bin/bash } reason ] {
                send_user "\nError: spawning bash failed: $reason\n"
                exit 1
            }
            send_user "\nEntering interactive bash shell, use ~ to exit\n"
            interact "~" return
        } elseif ![string compare $prog "sshv1"] {
            if [ catch {spawn /usr/bin/ssh -1 -x -c $cyphertype $user@$router} reason ] {
                send_user "\nError: ssh failed: $reason\n"
                exit 1
            }
        } elseif ![string compare $prog "ssh"] {
            set mycommand [concat ssh -c $cyphertype $sshver -x $user@$router]
            if [ catch "spawn $mycommand" reason ] {
                send_user "\nError: ssh failed: $reason\n"
                exit 1
            }
        } elseif ![string compare $prog "rsh"] {
            if [ catch {spawn rsh -l $user $router} reason ] {
                send_user "\nError: rsh failed: $reason\n"
                exit 1
            }
        } else {
            puts "\nError: unknown connection method: $prog"
            return 1
        }

        incr progs -1
        sleep 0.3

        # This helps cleanup each expect clause.
        expect_after {
            timeout {
                send_user "\nError: TIMEOUT reached\n"
                catch {close}; wait
                if { $in_proc} {
                    return 1
                } else {
                    continue
                }
            }
            eof {
                send_user "\nError: EOF received\n"
                catch {close}; wait
                if { $in_proc} {
                    return 1
                } else {
                    continue
                }
            }
        }

        # Here we get a little tricky.  There are several possibilities:
        # the router can ask for a username and passwd and then
        # talk to the TACACS server to authenticate you, or if the
        # TACACS server is not working, then it will use the enable
        # passwd.  Or, the router might not have TACACS turned on,
        # then it will just send the passwd.
        # if telnet fails with connection refused, try ssh

        expect {
            -re "(Connection refused|Secure connection \[^\n\r]+ refused|Connection closed by)" {
                catch {close}; wait
                if !$progs {
                    send_user "\nError: Connection Refused ($prog)\n"; return 1
                }
            }
            eof {
                send_user -- "$expect_out(buffer)"
                send_user "\nError: EOF\n"
                send_user "\nError: Couldn't login\n";
                wait;
                return 1
            }
            -nocase "unknown host\r" {
                catch {close};
                send_user "\nError: Unknown host\n"; wait; return 1
            }
            "Host is unreachable" {
                catch {close};
                send_user "\nError: Host Unreachable!\n"; wait; return 1
            }
            "No address associated with name" {
                catch {close};
                send_user "\nError: Unknown host\n"; wait; return 1
            }
            -re "(Host key not found |The authenticity of host .* be established).*\(yes\/no\)\?" {
                send "yes\r"
                send_user "\nHost $router added to the list of known hosts.\n"
                exp_continue
            }
            -re "HOST IDENTIFICATION HAS CHANGED.* \(yes\/no\)\?"   {
                send "no\r"
                send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
                return 1
            }
            -re "Offending key for .* \(yes\/no\)\?"   {
                send "no\r"
                send_user "\nError: host key mismatch for $router.\n";
                send_user "  Update the SSH known_hosts file accordingly.\n"
                return 1
            }
            -re "(denied|Sorry)" {
                send_user "\nError: Check your passwd for $router\n"
                catch {close}; wait; return 1
            }
            "Login failed" {
                send_user "\nError: Check your passwd for $router\n"
                return 1
            }
            -re "% (Bad passwords|Authentication failed)"	{
                send_user "\nError: Check your passwd for $router\n"
                return 1
            }
            -re "@\[^\r\n]+ $p_prompt"	{
                # ssh pwd prompt
                sleep 1
                send "$userpswd\r"
                exp_continue
            }
            -re "$u_prompt"		{
                send "$user\r"
                set uprompt_seen 1
                exp_continue
            }
            -re "$p_prompt"		{
                sleep 1
                if {$uprompt_seen == 1} {
                    send "$userpswd\r"
                } else {
                    send "$passwd\r"
                }
                exp_continue
            }
            "$prompt"		{
                break;
            }
            "Login invalid"		{
                send_user "\nError: Invalid login\n";
                catch {close}; wait; return 1
            }
        }
    }
    set in_proc 0
    return 0
}

# Enable
proc do_enable { enauser enapasswd } {
    global prompt in_proc
    global u_prompt e_prompt
    set in_proc 1

    send "enable\r"
    expect {
        -re "$u_prompt"	{ send "$enauser\r"; exp_continue}
        -re "$e_prompt"	{ send "$enapasswd\r"; exp_continue}
        "#"		{ set prompt "#" }
        "(enable)"	{ set prompt "> (enable) " }
        denied		{
            send_user "\nError: Check your Enable passwd\n"; return 1
        }
        "% Bad passwords" {
            send_user "\nError: Check your Enable passwd\n"
            return 1
        }
    }
    # We set the prompt variable (above) so script files don't need
    # to know what it is.
    set in_proc 0
    return 0
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global in_proc platform
    set in_proc 1

    # send_user "\nprompt is :$prompt:\n"

    # If the prompt is (enable), then we are on a switch and the
    # command is "set length 0"; otherwise its "term length 0".
    # skip if its an extreme.
    if { [ string compare "extreme" "$platform" ] } {
        if [ regexp -- ".*> .*enable" "$prompt" ] {
            send "set length 0\r"
        } elseif [ regexp -- "^f-.*" "$prompt" ] {
            send "\r"
        } elseif [ regexp -- "^fa-.*" "$prompt" ] {
            send "term pager 0\r"
        } elseif [ regexp -- "^fm-.*" "$prompt" ] {
            send "term pager 0\r"
        } elseif [ regexp -- ".* Main\#" "$prompt" ] {
            send "\r"
        } else {
            send "term length 0\r"
        }
        # simply truncating prompt and adding .* fails after the config
        # portion has been done:
        # r-hcwhite-5190-1-nod(config)#exit
        # r-hcwhite-5190-1-node#
        # wait and wait and timeout
        # puts "\n working on :$prompt:"
        regsub -all "\[)(]" $prompt {\\&} reprompt
        # match cisco config mode prompts too, but not for catalyst ie: (enable)
        # replaces a more specific hostname(stuff)# with host.*# because
        # hostname was truncating on r-hcwhite-5190-1-node# and 
        # r-sterling to r-hcwhite-5190-1-nod(config)# because hostname
        # hostname was too long.
        # 
        # regsub -all "\[#>]$" $reprompt {(\\([^\\r\\n]+\\))?&} reprompt
        # match layer4 switch >>
        if [regexp -- "^>> l-.*" "$reprompt" ] {
            regsub -all "^(>> \[a-zA-Z0-9-]{1,12})(.*)(\#)$" $reprompt {\1.*\3} reprompt
        } else {
            regsub -all "^(\[a-zA-Z0-9-]{1,12})(.*)(\[#>]$)" $reprompt {\1.*\3} reprompt
        }
        expect {
            -re $reprompt	{}
            -re "\[\n\r]+"	{ exp_continue }
        }
    } else {
        regsub -all "\[)(]" $prompt {\\&} reprompt
    }
    # this is the only way i see to get rid of more prompts in o/p..grrrrr
    log_user 0

    # Is this a multi-command?
    if [ string match "*\;*" "$command" ] {
        set commands [split $command \;]
        set num_commands [llength $commands]
        # the pager can not be turned off on the PIX, so we have to look
        # for the "More" prompt.  the extreme is equally obnoxious, with a
        # global switch in the config.
        for {set i 0} {$i < $num_commands} { incr i} {
            send "[subst -nocommands [lindex $commands $i]]\r"
            expect {
                -re "\!\!"			{ exp_continue }
                -re "\#\#"			{ exp_continue }
                # added 6/1/04 to catch !!! or ### coming back from command.
                # which was causing clogin to time out.
                # for some reason I added send "y\n" which seems wrong
                # so on 9/12/04 I changed it to "y\r" and removed -re
                # since confirm is not a regex
                "confirm\]"     {
                    send "\r"
                    send_user -- "$expect_out(buffer)"
                    exp_continue
                }
                # added 6/1/04 to catch [confirm] in various commands.
                # Note the highly unintuitive send_user is required,
                # I think it flushes the buffer.  Otherwise the
                # process sends y\r over and over and over

                # added 2009/10/28 plonka:
		# Cisco devices ask confirm-like questions, such as:
		#   Delete filename [foo.cfg]?
	 	# i.e., with a default value specified in square brackets.
                -re " filename \[..*?\]?"     {
                    send "\r"
                    send_user -- "$expect_out(buffer)"
                    exp_continue
                }

                -re "\b+"   { exp_continue }
                -re "^\[^\n\r *]*$reprompt"	{
                    send_user -- "$expect_out(buffer)"
                }
                -re "^\[^\n\r]*$reprompt."	{
                    send_user -- "$expect_out(buffer)"
                    exp_continue
                }
                -re "\[\n\r]+"   {
                    send_user -- "$expect_out(buffer)"
                    exp_continue
                }
                -re "\[^\r\n]*Press <SPACE> to cont\[^\r\n]*"	{
                    send " "
                    # bloody ^[[2K after " "
                    expect {
                        -re "^\[^\r\n]*\r" {}
                    }
                    exp_continue
                }
                -re "^ --More--\[^\n\r]*"	{
                    send " "
                    exp_continue
                }
                # fortinets do not put a space before --More-- ejp 10/15/2008
                -re "^--More-- \[^\n\r]*"	{
                    send " "
                    exp_continue
                }
                -re "^<-+ More -+>\[^\n\r]*"	{
                    send_user -- "$expect_out(buffer)"
                    send " "
                    exp_continue
                }
            }
        }
    } else {
        # the pager can not be turned off on the PIX, so we have to look
        # for the "More" prompt.  the extreme is equally obnoxious, with a
        # global switch in the config.
        send "[subst -nocommands $command]\r"
        expect {
            -re "\!\!"   { exp_continue }
            -re "\#\#"	  { exp_continue }
            # added 6/1/04 to catch !!! or ### coming back from command.
            # which was causing clogin to time out.
            # changed "y\n" to "y\r" on 9/14/04
            # "\[confirm\]" was always sending y
            "confirm\]" { send "y\r" }
            # added 6/1/04 to catch [confirm] in various commands.
            -re "\b+"			{ exp_continue }
            -re "^\[^\n\r *]*$reprompt"	{ send_user -- "$expect_out(buffer)"
            }
            -re "^\[^\n\r]*$reprompt."	{ send_user -- "$expect_out(buffer)"
                exp_continue }
            -re "\[\n\r]+"   { send_user -- "$expect_out(buffer)"
                exp_continue }
            -re "\[^\r\n]*Press <SPACE> to cont\[^\r\n]*"	{
                send " "
                # bloody ^[[2K after " "
                expect {
                   -re "^\[^\r\n]*\r" {}
                }
            exp_continue
            }
            -re "^ --More--\[^\n\r]*"	{
                send " "
                exp_continue }
            -re "^<-+ More -+>\[^\n\r]*"	{
                send_user -- "$expect_out(buffer)"
                send " "
                exp_continue }
            }
        }
        log_user 1

        if { [ string compare "extreme" "$platform" ] } {
            send "exit\r"
        } else {
            send "quit\r"
        }
        expect {
            "Do you wish to save your configuration changes" {
            send "n\r"
            exp_continue
        }
        "\n"					{ exp_continue }
        timeout					{ return 0 }
        eof					{ return 0 }
    }
    set in_proc 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    send_user "$router\n"

    # nexus switches automatically enable.
    if { [string match sn-* $router]} {
      set autoenable 1;
      set enable 0;
    }

    # fortinet firewalls automatically enable.
    if { [string match ff-* $router]} {
      set autoenable 1;
    }

    # wireless devices automatically enable.
    # I changed /etc/radius/clients to stop this - ejp 5/20/2007
    if { [string match w-* $router]} {
      # no longer needed, ejp 5/20/2007
      # set autoenable 1;
    }

    if { [string match l-* $router]} {
        # net and netuser have different radius user types, ejp 11/9/2007
        set sshver "-1";
        set autoenable 1;
        set enable 0;
    }

# they support v2 now, ejp 1/8/2008
#   # match fwsm admin context
#   if {[string match f-* $router]} {
#     set sshver "-1";
#   }

# they support v2 now, ejp 1/8/2008
#   # match fwsm firewall context
#   if {[string match fx-* $router]} {
#     set sshver "-1";
#   } 


    # Figure out prompt.
    # Since autoenable is off by default, if we have it defined, it
    # was done on the command line. If it is not specifically set on the
    # command line, check the password file.
    if $autoenable {
	set prompt "#"
    } else {
	set ae [find autoenable $router]
	if { "$ae" == "1" } {
	    set autoenable 1
	    set enable 0
	    set prompt "#"
	} else {
	    set autoenable 0
	    set prompt ">"
	}
    }

    # look for noenable option in .cloginrc
    if { [find noenable $router] != "" } {
	set enable 0
    }

    # Figure out passwords
    if { $do_passwd || $do_enapasswd } {
      set pswd [find password $router]
      if { [llength $pswd] == 0 } {
	send_user "Error: no password for $router in $password_file.\n"
	continue
      }
      if { $enable && $do_enapasswd && $autoenable == 0 && [llength $pswd] < 2 } {
	send_user "Error: no enable password for $router in $password_file.\n"
	continue
      }
      set passwd [lindex $pswd 0]
      set enapasswd [lindex $pswd 1]
    }

    # Figure out username
    if {[info exists username]} {
      # command line username
      set ruser $username
    } else {
      set ruser [find user $router]
      if { "$ruser" == "" } { set ruser $default_user }
    }

    # Figure out username's password (if different from the vty password)
    if {[info exists userpasswd]} {
      # command line username
      set userpswd $userpasswd
    } else {
      set userpswd [find userpassword $router]
      if { "$userpswd" == "" } { set userpswd $passwd }
    }

    # Figure out enable username
    if {[info exists enausername]} {
      # command line enausername
      set enauser $enausername
    } else {
      set enauser [find enauser $router]
      if { "$enauser" == "" } { set enauser $ruser }
    }

    # Figure out prompts
    set u_prompt [find userprompt $router]
    if { "$u_prompt" == "" } {
	set u_prompt "(Username|Login|login|user name|Enter username|Enter radius username):"
    } else {
	set u_prompt [lindex $u_prompt 0]
    }
    set p_prompt [find passprompt $router]
    if { "$p_prompt" == "" } {
	set p_prompt "(\[Pp]assword|passwd|Enter password):"
    } else {
	set p_prompt [lindex $p_prompt 0]
    }
    set e_prompt [find enableprompt $router]
    if { "$e_prompt" == "" } {
	set e_prompt "\[Pp]assword:"
    } else {
	set e_prompt [lindex $e_prompt 0]
    }

    # Figure out cypher type
    if {[info exists cypher]} {
      # command line cypher type
      set cyphertype $cypher
    } else {
      set cyphertype [find cyphertype $router]
      if { "$cyphertype" == "" } { set cyphertype "3des" }
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }

    # Login to the router
    if {[login $router $ruser $userpswd $passwd $enapasswd $cmethod $cyphertype]} {
        continue
    }
    if { $enable } {
        send_user "\nattempting to enable on $router\n";
        if {[do_enable $enauser $enapasswd]} {
            if { $do_command || $do_script } {
                close; wait
                continue
            }
        }
    }
    # we are logged in, now figure out the full prompt
    send "\r"
    expect {
        -re "\[\r\n]+"		{ exp_continue; }
        -re "^(.+:)1 $prompt"	{ # stoopid extreme cmd-line numbers and
            # prompt based on state of config changes
            set junk $expect_out(1,string)
            regsub -all "^\\\* " $expect_out(1,string) {} junk
            set prompt ".? ?$junk\[0-9]+ $prompt";
            set platform "extreme"
        }
        -re "^.+$prompt"	{ set junk $expect_out(0,string);
            regsub -all "\[\]\[]" $junk {\\&} prompt;
        }
        -re "^.+> \\\(enable\\\)"	{ set junk $expect_out(0,string);
            regsub -all "\[\]\[]" $junk {\\&} prompt;
        }
    }

    if { $do_command } {
        if {[run_commands $prompt $command]} {
            continue
        }
    } elseif { $do_script } {
        # If the prompt is (enable), then we are on a switch and the
        # command is "set length 0"; otherwise its "term length 0".
        if [ regexp -- ".*> .*enable" "$prompt" ] {
            send "set length 0\r"
            send "set logging session disable\r"
        } else {
            send "term length 0\r"
        }
        expect -re $prompt	{}
        source $sfile
        close
    } else {
        label $router
        log_user 1
        interact
    }

    # End of for each router
    wait
    sleep 0.3
}
exit 0
